import { db } from "../config/firebase.js"
import { collection, getDocs, doc, getDoc, updateDoc, query, where } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-firestore.js";

const cartRender = document.querySelector('#cart_render');
const currentUser = JSON.parse(localStorage.getItem('currentUser'));

async function getCart() {
    try {
        const querySnapshot = await getDocs(collection(db, "Cart"));
        let cart = [];

        querySnapshot.forEach((doc) => {
            cart.push({ id: doc.id, ...doc.data() });
        });

        return cart;
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu Firestore:", error);
        return [];
    }
}

async function getProductDetails(productId) {
    if (!productId || typeof productId !== "string") {
        console.error("L·ªói: productId kh√¥ng h·ª£p l·ªá", productId);
        console.log("Ki·ªÉu d·ªØ li·ªáu:", typeof productId);
        return null;
    }

    try {
        const productRef = doc(db, "Products", productId);
        const productSnap = await getDoc(productRef);
        if (productSnap.exists()) {
            return productSnap.data();
        } else {
            console.warn("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID:", productId);
        }
        return null;
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error);
        return null;
    }
}


async function getCartDetail() {
    const carts = await getCart();
    console.log("üî• D·ªØ li·ªáu gi·ªè h√†ng t·ª´ Firestore:", carts); // Debug data

    const cartFill = carts.find((p) => p.userId === currentUser?.userId);
    console.log("Gi·ªè h√†ng c·ªßa user:", cartFill); // Debug user cart

    if (!cartFill || !cartFill.products || cartFill.products.length === 0) {
        cartRender.innerHTML = `<tr class="align-middle text-center">
                    <td class="w-100 " colspan="5">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng, vui l√≤ng ch·ªçn s·∫£n ph·∫©m</td>   
                </tr>`;
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c gi·ªè h√†ng r·ªóng");
        return;
    }

    let productList = Array.isArray(cartFill.products) ? cartFill.products : [cartFill.products];

    const detailedCart = await Promise.all(
        productList.map(async (product) => {
            const productDetails = await getProductDetails(product.productId);
            if (productDetails) {
                return {
                    productId: product.productId,
                    name: productDetails.name,
                    price: productDetails.price,
                    image: productDetails.image,
                    quantity: product.quantity,
                    totalPrice: product.quantity * productDetails.price,
                    option: product.option
                };
            }
            return null;
        })
    );

    console.log("‚úÖ Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng:", detailedCart);
    renderCart(detailedCart.filter((item) => item !== null));
}



async function deleteProductFromCart(productId) {
    try {
        console.log("Current User ID:", currentUser?.userId);

        // Truy v·∫•n gi·ªè h√†ng c·ªßa user
        const cartQuery = query(collection(db, "Cart"), where("userId", "==", currentUser.userId));
        const querySnapshot = await getDocs(cartQuery);

        // Ki·ªÉm tra xem c√≥ gi·ªè h√†ng hay kh√¥ng
        if (querySnapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng.");
            return;
        }

        // L·∫•y document ƒë·∫ßu ti√™n (v√¨ m·ªói user ch·ªâ c√≥ 1 gi·ªè h√†ng)
        const cartDoc = querySnapshot.docs[0];
        let cartData = cartDoc.data();

        console.log("Cart Data Before Deletion:", cartData);

        // Ki·ªÉm tra n·∫øu products t·ªìn t·∫°i
        if (!cartData.products || cartData.products.length === 0) {
            console.log("Gi·ªè h√†ng tr·ªëng!");
            return;
        }

        // L·ªçc b·ªè s·∫£n ph·∫©m c·∫ßn x√≥a
        cartData.products = cartData.products.filter((product) => product.productId !== productId);

        // C·∫≠p nh·∫≠t l·∫°i Firestore
        await updateDoc(doc(db, "Cart", cartDoc.id), { products: cartData.products });

        console.log("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!");
        window.location.reload();

        // Load l·∫°i gi·ªè h√†ng sau khi x√≥a
        getCartDetail();
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    }
}


function renderCart(cart) {
    let html = "";
    let totalAmount = 0;

    cart.forEach((item, index) => {
        item.totalPrice = item.quantity * item.price; // ƒê·∫£m b·∫£o gi√° tr·ªã ƒë√∫ng
        totalAmount += item.totalPrice; // T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
        html += `
            <tr class="align-middle text-center">
                <td class="w-50">
                    <div class="d-flex align-items-center flex-lg-row flex-md-column flex-sm-column flexsm">
                        <img src="${item.image}" alt="product" class="img-fluid" style="width: 100px;">
                        <div class="ms-3">
                            <h5 class="text-capitalize fw-normal">${item.name}</h5>
                        </div>
                    </div>
                </td>
                <td style="width: 15%;">${item.price.toLocaleString()}.000‚Ç´</td>
                <td style="width: 15%;">
                    <div>
                        <button class="btn btn-success decrement" data-index="${index}">-</button>
                        <span class="mx-2 count" data-index="${index}">${item.quantity}</span>
                        <button class="btn btn-success increment" data-index="${index}">+</button>
                    </div>
                </td>
                <td style="width: 15%;" class="total-price" data-index="${index}">${item.totalPrice.toLocaleString()}.000‚Ç´</td>
                <td style="width: 15%;">
                    <i class="bi bi-x-circle fw-bold fs-4 delete-item" data-id="${item.productId}" style="color:#006F3C;cursor:pointer"></i>
                </td>
            </tr>
        `;
    });
    localStorage.setItem('totalAmount', totalAmount);
    cartRender.innerHTML = html;

    document.querySelector('#checkout').innerHTML = `

        <div>
            <h3>T·ªïng s·ªë ti·ªÅn: <span style="color:#006F3C" id="totalPriceToCheckOut">${totalAmount.toLocaleString()}.000‚Ç´</span></h3>
            <button class="btn btn-success w-100" onclick="window.location.href='/pages/checkout.html'">Ti·∫øn h√†nh ƒë·∫∑t h√†ng</button>
        </div>
    `;

    // G·∫Øn s·ª± ki·ªán tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng sau khi c·∫≠p nh·∫≠t HTML
    document.querySelectorAll(".increment, .decrement").forEach((button) => {
        button.addEventListener("click", async (event) => {
            const index = event.target.getAttribute("data-index");
            let product = cart[index];

            if (button.classList.contains("increment")) {
                product.quantity++;
            } else if (product.quantity > 1) {
                product.quantity--;
            }

            product.totalPrice = product.quantity * product.price;

            // C·∫≠p nh·∫≠t tr√™n giao di·ªán ngay l·∫≠p t·ª©c
            renderCart(cart);

            // G·ª≠i c·∫≠p nh·∫≠t l√™n Firestore
            await updateProductQuantity(product.productId, product.quantity, product.totalPrice);
        });
    });


    document.querySelectorAll(".delete-item").forEach((button) => {
        button.addEventListener("click", (event) => {
            const productId = event.target.getAttribute("data-id");
            console.log(productId);
            deleteProductFromCart(productId);
            showToast("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!");
        });
    });
}


async function updateProductQuantity(productId, newQuantity) {
    try {
        const cartQuery = query(collection(db, "Cart"), where("userId", "==", currentUser.userId));
        const querySnapshot = await getDocs(cartQuery);

        if (querySnapshot.empty) {
            console.log("Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa user.");
            return;
        }

        const cartDoc = querySnapshot.docs[0]; // L·∫•y gi·ªè h√†ng c·ªßa user
        let cartData = cartDoc.data();

        if (!cartData.products || cartData.products.length === 0) {
            console.log("Gi·ªè h√†ng tr·ªëng!");
            return;
        }

        // L·∫•y gi√° s·∫£n ph·∫©m m·ªõi nh·∫•t t·ª´ Firestore
        const productDetails = await getProductDetails(productId);
        if (!productDetails) {
            console.warn("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong Firestore!");
            return;
        }

        // C·∫≠p nh·∫≠t quantity v√† totalPrice c·ªßa s·∫£n ph·∫©m
        cartData.products = cartData.products.map((product) => {
            if (product.productId === productId) {
                return {
                    ...product,
                    quantity: newQuantity,
                    totalPrice: newQuantity * productDetails.price // T√≠nh l·∫°i t·ªïng ti·ªÅn
                };
            }
            return product;
        });

        // C·∫≠p nh·∫≠t l·∫°i Firestore
        await updateDoc(doc(db, "Cart", cartDoc.id), { products: cartData.products });

        console.log(`C·∫≠p nh·∫≠t th√†nh c√¥ng: ${productId}, Quantity: ${newQuantity}, Total Price: ${newQuantity * productDetails.price}`);
        showToast("Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");

        // Load l·∫°i gi·ªè h√†ng sau khi c·∫≠p nh·∫≠t
        getCartDetail();
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m:", error);
        showToast("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng!");
    }
}



function showToast(message) {
    Toastify({
        text: message,
        duration: 3000,
        close: true,
        gravity: "top", // `top` or `bottom`
        position: "right", // `left`, `center` or `right`
        stopOnFocus: true, // Prevents dismissing of toast on hover
        style: {
            background: "#006F3C",
            color: "#fff",
            border: "none",
            borderRadius: "6px",
            padding: "10px",
            fontWeight: "bold",
            fontFamily: "Arial, sans-serif",
            fontSize: "20px",
            lineHeight: "1.5",
        },
        onClick: function () { } // Callback after click
    }).showToast();
}
// G·ªçi h√†m ƒë·ªÉ l·∫•y gi·ªè h√†ng c·ªßa user
getCartDetail();


